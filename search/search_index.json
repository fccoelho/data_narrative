{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Data Narrative \u00b6 This is a tool to generate natural language narrative for a database table. These narratives can have multiple applications, such as simply describing datasets, or generating reports. The narratives are generated using a template-based approach, where the user can define the structure of the narrative using a simple template based on the Jinja2 templating engine. Free software: MIT Documentation: https://fccoelho.github.io/data_narrative/ Features \u00b6 Support for different types of narratives Structural narrative: Just gives the name of table and enumerates the columns in the table, as well as the number of rows. Credits \u00b6 This package was created with the ppw tool. For more information, please visit the project page .","title":"home"},{"location":"#data-narrative","text":"This is a tool to generate natural language narrative for a database table. These narratives can have multiple applications, such as simply describing datasets, or generating reports. The narratives are generated using a template-based approach, where the user can define the structure of the narrative using a simple template based on the Jinja2 templating engine. Free software: MIT Documentation: https://fccoelho.github.io/data_narrative/","title":"Data Narrative"},{"location":"#features","text":"Support for different types of narratives Structural narrative: Just gives the name of table and enumerates the columns in the table, as well as the number of rows.","title":"Features"},{"location":"#credits","text":"This package was created with the ppw tool. For more information, please visit the project page .","title":"Credits"},{"location":"api/","text":"Top-level package for Data Narrative. app \u00b6 Main module. cli \u00b6 Console script for data_narrative. narratives \u00b6 StructuralNarrative \u00b6 A class to generate a structural narrative for a database table Source code in data_narrative/narratives.py class StructuralNarrative : ''' A class to generate a structural narrative for a database table ''' def __init__ ( self , conn : duckdb . DuckDBPyConnection ): self . conn = conn def generate ( self , table : str ) -> str : query = f \"SELECT * FROM { table } \" result = self . conn . execute ( query ) columns = [ col [ 0 ] for col in result . description ] rows = result . fetchall () return self . render ( table , columns , rows ) def render ( self , table : str , columns : list , rows : list ) -> str : template = jinja2 . Template ( \"\"\" Table: {{ table }} Columns: {{ columns | join(', ') }} Rows: {{ rows | length }} \"\"\" ) return template . render ( table = table , columns = columns , rows = rows )","title":"modules"},{"location":"api/#data_narrative.app","text":"Main module.","title":"app"},{"location":"api/#data_narrative.cli","text":"Console script for data_narrative.","title":"cli"},{"location":"api/#data_narrative.narratives","text":"","title":"narratives"},{"location":"api/#data_narrative.narratives.StructuralNarrative","text":"A class to generate a structural narrative for a database table Source code in data_narrative/narratives.py class StructuralNarrative : ''' A class to generate a structural narrative for a database table ''' def __init__ ( self , conn : duckdb . DuckDBPyConnection ): self . conn = conn def generate ( self , table : str ) -> str : query = f \"SELECT * FROM { table } \" result = self . conn . execute ( query ) columns = [ col [ 0 ] for col in result . description ] rows = result . fetchall () return self . render ( table , columns , rows ) def render ( self , table : str , columns : list , rows : list ) -> str : template = jinja2 . Template ( \"\"\" Table: {{ table }} Columns: {{ columns | join(', ') }} Rows: {{ rows | length }} \"\"\" ) return template . render ( table = table , columns = columns , rows = rows )","title":"StructuralNarrative"},{"location":"authors/","text":"Credits \u00b6 Development Lead \u00b6 Fl\u00e1vio Code\u00e7o Coelho fccoelho@gmail.com Contributors \u00b6 None yet. Why not be the first?","title":"authors"},{"location":"authors/#credits","text":"","title":"Credits"},{"location":"authors/#development-lead","text":"Fl\u00e1vio Code\u00e7o Coelho fccoelho@gmail.com","title":"Development Lead"},{"location":"authors/#contributors","text":"None yet. Why not be the first?","title":"Contributors"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/fccoelho/data_narrative/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 Data Narrative could always use more documentation, whether as part of the official Data Narrative docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/fccoelho/data_narrative/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up data_narrative for local development. Fork the data_narrative repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/data_narrative.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/fccoelho/data_narrative/actions and make sure that the tests pass for all supported Python versions. Tips``` \u00b6 1 $ pytest tests.test_data_narrative ```To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Github Actions will then deploy to PyPI if tests pass.","title":"contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/fccoelho/data_narrative/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"Data Narrative could always use more documentation, whether as part of the official Data Narrative docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/fccoelho/data_narrative/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up data_narrative for local development. Fork the data_narrative repo on GitHub. Clone your fork locally 1 $ git clone git@github.com:your_name_here/data_narrative.git Ensure poetry is installed. Install dependencies and start your virtualenv: 1 $ poetry install -E test -E doc -E dev Create a branch for local development: 1 $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: 1 $ tox Commit your changes and push your branch to GitHub: 1 2 3 $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8, 3.9 and for PyPy. Check https://github.com/fccoelho/data_narrative/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"1 $ pytest tests.test_data_narrative ```To run a subset of tests.","title":"Tips```"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in HISTORY.md). Then run: 1 2 3 $ poetry patch # possible: major / minor / patch $ git push $ git push --tags Github Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"history/","text":"History \u00b6 0.1.0 (2024-07-06) \u00b6 First release on PyPI.","title":"history"},{"location":"history/#history","text":"","title":"History"},{"location":"history/#010-2024-07-06","text":"First release on PyPI.","title":"0.1.0 (2024-07-06)"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install Data Narrative, run this command in your terminal: 1 pip install data_narrative This is the preferred method to install Data Narrative, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for Data Narrative can be downloaded from the Github repo . You can either clone the public repository: 1 git clone git://github.com/fccoelho/data_narrative Or download the tarball : 1 curl -OJL https://github.com/fccoelho/data_narrative/tarball/master Once you have a copy of the source, you can install it with: 1 pip install .","title":"installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install Data Narrative, run this command in your terminal: 1 pip install data_narrative This is the preferred method to install Data Narrative, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for Data Narrative can be downloaded from the Github repo . You can either clone the public repository: 1 git clone git://github.com/fccoelho/data_narrative Or download the tarball : 1 curl -OJL https://github.com/fccoelho/data_narrative/tarball/master Once you have a copy of the source, you can install it with: 1 pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use Data Narrative in a project 1 2 3 4 5 6 7 8 9 10 11 import duckdb # or any other database library from data_narrative.narratives import StructuralNarrative # Connect to the database con = duckdb . connect ( database = \":memory:\" ) con . execute ( 'CREATE TABLE dengue as select * from \"tests/test_datasets/SE_dengue.csv.gz\"' ) # Create a narrative SN = StructuralNarrative ( con ) # Generate the narrative for a table SN . generate ( \"dengue\" )","title":"usage"},{"location":"usage/#usage","text":"To use Data Narrative in a project 1 2 3 4 5 6 7 8 9 10 11 import duckdb # or any other database library from data_narrative.narratives import StructuralNarrative # Connect to the database con = duckdb . connect ( database = \":memory:\" ) con . execute ( 'CREATE TABLE dengue as select * from \"tests/test_datasets/SE_dengue.csv.gz\"' ) # Create a narrative SN = StructuralNarrative ( con ) # Generate the narrative for a table SN . generate ( \"dengue\" )","title":"Usage"}]}