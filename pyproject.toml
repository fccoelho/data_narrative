[tool]

[tool.uv]
test = ["pytest", "pytest-cov"]
dev-dependencies = [
    "tox",
    "pre-commit",
    "twine",
    "toml",
    "flake8-docstrings",
    "ruff",
    "pytest>=8.3.3",
]
doc = [
    "mkdocs",
    "mkdocs-include-markdown-plugin",
    "mkdocs-material",
    "mkdocstrings",
    "mkdocs-material-extensions",
    "mkdocs-autorefs",
    "mkdocs-jupyter",
    "mike",
    "setuptools",
    "pkginfo",
    "virtualenv",
]

[tool.uv.sources]
reg-d-bot = { git = "https://github.com/Deeplearn-PeD/reg" }

[tool.pdm.build]
includes = ["data_narrative", "tests"]
[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[project]
authors = [{ name = "Flávio Codeço Coelho", email = "fccoelho@gmail.com" }]
license = { text = "MIT" }
requires-python = "<4.0,>=3.11"
dependencies = [
    "fire<1.0.0,>=0.6.0",
    "duckdb<2.0.0,>=1.0.0",
    "jinja2<4.0.0,>=3.1.4",
    "reg-d-bot",
]
name = "data_narrative"
version = "0.1.0"
description = "Tool to generate natural language narrative for a database table."
readme = "README.md"
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[project.urls]
homepage = "https://github.com/fccoelho/data_narrative"

[project.scripts]
data_narrative = "data_narrative.cli:main"
